{"version":3,"sources":["../src/writeReport.js"],"names":["require","istanbulReportTypes","clover","cobertura","html","json","lcovonly","teamcity","text","module","exports","writeReport","collector","reportType","reportOptions","dest","sources","resolve","reject","SyntaxError","Reporter","options","file","dir","log","console","Error","sourceStore","reporter"],"mappings":";;;;;;;;;;;;AAAAA,QAAQ,gBAAR;;AAEA,IAAMC,sBAAsB;AAC3BC,SAAQ,MADmB;AAE3BC,YAAW,MAFgB;AAG3BC,OAAM,WAHqB;AAI3B,iBAAgB,MAJW;AAK3BC,OAAM,MALqB;AAM3BC,WAAU,MANiB;AAO3BC,WAAU,MAPiB;AAQ3B,cAAa,SARc;AAS3B,iBAAgB,MATW;AAU3BC,OAAM;AAVqB,CAA5B;;AAaA;;;;;;;;;;;;;;;AAeAC,OAAOC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,SAArB,EAAgCC,UAAhC,EAA4CC,aAA5C,EAA2DC,IAA3D,EAAiEC,OAAjE,EAA0E;AAC1F,QAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,MAAI,EAAEL,cAAcZ,mBAAhB,CAAJ,EAA0C;AACzCiB,UAAO,IAAIC,WAAJ,mCAAgDN,UAAhD,QAAP;AACA;AACA;AACD,MAAMO,WAAWpB,iCAA+Ba,UAA/B,CAAjB;AACA,MAAMQ,UAAU,sBAAc,EAAd,EAAkBP,aAAlB,CAAhB;AACA,UAAQb,oBAAoBY,UAApB,CAAR;AACC,QAAK,MAAL;AACCQ,YAAQC,IAAR,GAAeP,IAAf;AACA;AACD,QAAK,WAAL;AACCM,YAAQE,GAAR,GAAcR,IAAd;AACA;AACD,QAAK,SAAL;AACCM,YAAQG,GAAR,GAAcT,QAAQU,QAAQD,GAA9B;AACA;AACD;AACC,UAAM,IAAIE,KAAJ,CAAU,uBAAV,CAAN;AAXF;AAaA,MAAIV,OAAJ,EAAa;AACZK,WAAQM,WAAR,GAAsBX,OAAtB;AACA;AACD,MAAMY,WAAW,IAAIR,QAAJ,CAAaC,OAAb,CAAjB;AACAJ,UAAQW,SAASjB,WAAT,CAAqBC,SAArB,EAAgC,IAAhC,CAAR;AACA,EAzBM,CAAP;AA0BA,CA3BD","file":"writeReport.js","sourcesContent":["require('istanbul/index');\r\n\r\nconst istanbulReportTypes = {\r\n\tclover: 'file',\r\n\tcobertura: 'file',\r\n\thtml: 'directory',\r\n\t'json-summary': 'file',\r\n\tjson: 'file',\r\n\tlcovonly: 'file',\r\n\tteamcity: 'file',\r\n\t'text-lcov': 'console',\r\n\t'text-summary': 'file',\r\n\ttext: 'file',\r\n};\r\n\r\n/**\r\n * Generates an Instanbul Coverage report based on the information passed.\r\n * @param  {istanbul/lib/_collector} collector  An instance of an coverage\r\n *                                             collector\r\n * @param  {string}          reportType    The name of the report type to\r\n *                                         generate\r\n * @param  {object}       reportOptions The options to pass to the reporter\r\n * @param  {string|function} dest          The filename or outputting\r\n *                                         function to use for generating\r\n *                                         the report\r\n * @param  {istanbul/lib/store} sources?   A store of sources to be passed\r\n *                                         the reporter\r\n * @return {Promise}                       A promise that resolves when the\r\n *                                         report is complete.\r\n */\r\nmodule.exports = function writeReport(collector, reportType, reportOptions, dest, sources) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tif (!(reportType in istanbulReportTypes)) {\r\n\t\t\treject(new SyntaxError(`Unrecognized report type of \"${reportType}\".`));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst Reporter = require(`istanbul/lib/report/${reportType}`);\r\n\t\tconst options = Object.assign({}, reportOptions);\r\n\t\tswitch (istanbulReportTypes[reportType]) {\r\n\t\t\tcase 'file':\r\n\t\t\t\toptions.file = dest;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'directory':\r\n\t\t\t\toptions.dir = dest;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'console':\r\n\t\t\t\toptions.log = dest || console.log;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error('Unknown reporter type');\r\n\t\t}\r\n\t\tif (sources) {\r\n\t\t\toptions.sourceStore = sources;\r\n\t\t}\r\n\t\tconst reporter = new Reporter(options);\r\n\t\tresolve(reporter.writeReport(collector, true));\r\n\t});\r\n};\r\n"]}