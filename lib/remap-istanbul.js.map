{"version":3,"sources":["../src/remap-istanbul.js"],"names":["loadCoverage","require","remap","writeReport","MemoryStore","Collector","readStdIn","resolve","reject","stdin","process","buffer","setEncoding","on","data","e","resume","main","argv","getArg","arg","shift","indexOf","split","length","unshift","slice","join","substring","map","ch","concat","inputFiles","output","reportType","basePath","exclude","push","RegExp","replace","SyntaxError","coverage","then","JSON","parse","collector","add","getFinalCoverage","err","console","error","stack","sources","undefined","reportOptions","stdout","write","module","parent","title","code","exit","log","exports"],"mappings":"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","file":"remap-istanbul.js","sourcesContent":["\r\n\r\nconst loadCoverage = require('./loadCoverage');\r\nconst remap = require('./remap');\r\nconst writeReport = require('./writeReport');\r\nconst MemoryStore = require('istanbul/lib/store/memory');\r\nconst Collector = require('istanbul/lib/collector');\r\n\r\n/**\r\n * Helper function that reads from standard in and resolves a Promise with the\r\n * data or rejects with any errors.\r\n * @return {Promise} A promsie that is resolved with the data from standard in\r\n *                   or rejected with any errors.\r\n */\r\nfunction readStdIn() {\r\n\t/* istanbul ignore next: too challenging to test for reading from stdin */\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst stdin = process.stdin;\r\n\t\tlet buffer = '';\r\n\r\n\t\tstdin.setEncoding('utf8');\r\n\r\n\t\tstdin.on('data', (data) => {\r\n\t\t\tbuffer += data;\r\n\t\t});\r\n\r\n\t\tstdin.on('error', (e) => {\r\n\t\t\treject(e);\r\n\t\t});\r\n\r\n\t\tstdin.on('end', () => {\r\n\t\t\tresolve(buffer);\r\n\t\t});\r\n\r\n\t\ttry {\r\n\t\t\tstdin.resume();\r\n\t\t} catch (e) {\r\n\t\t\treject(e);\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/**\r\n * The main wrapper to provide a CLI interface to remap-istanbul\r\n * @param  {Array}   argv An array of arguments passed the process\r\n * @return {Promise}      A promise that resolves when the remapping is complete\r\n *                        or rejects if there is an error.\r\n */\r\nfunction main(argv) {\r\n\t/* jshint maxcomplexity:13 */\r\n\r\n\t/**\r\n\t * Helper function that processes the arguments\r\n\t * @return {String} The next valid argument\r\n\t */\r\n\tfunction getArg() {\r\n\t\tlet arg = argv.shift();\r\n\t\tif (arg && arg.indexOf('--') === 0) {\r\n\t\t\targ = arg.split('=');\r\n\t\t\tif (arg.length > 1) {\r\n\t\t\t\targv.unshift(arg.slice(1).join('='));\r\n\t\t\t}\r\n\t\t\targ = arg[0];\r\n\t\t} else if (arg && arg[0] === '-') {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (arg.length > 2) {\r\n\t\t\t\targv = arg.substring(1).split('')\r\n\t\t\t\t\t.map((ch) => '-' + ch)\r\n\t\t\t\t\t.concat(argv);\r\n\t\t\t\targ = argv.shift();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn arg;\r\n\t}\r\n\r\n\tlet arg;\r\n\tconst inputFiles = [];\r\n\tlet output;\r\n\tlet reportType;\r\n\tlet basePath;\r\n\tlet exclude;\r\n\tfor (arg = getArg(); arg; arg = getArg()) {\r\n\t\tswitch (arg) {\r\n\t\t\tcase '-i':\r\n\t\t\tcase '--input':\r\n\t\t\t\tinputFiles.push(argv.shift());\r\n\t\t\t\tbreak;\r\n\t\t\tcase '-o':\r\n\t\t\tcase '--output':\r\n\t\t\t\toutput = argv.shift();\r\n\t\t\t\tbreak;\r\n\t\t\tcase '-b':\r\n\t\t\tcase '--basePath':\r\n\t\t\t\tbasePath = argv.shift();\r\n\t\t\t\tbreak;\r\n\t\t\tcase '-t':\r\n\t\t\tcase '--type':\r\n\t\t\t\treportType = argv.shift();\r\n\t\t\t\tbreak;\r\n\t\t\tcase '-e':\r\n\t\t\tcase '--exclude':\r\n\t\t\t\texclude = argv.shift();\r\n\t\t\t\tif (exclude.indexOf(',') !== -1) {\r\n\t\t\t\t\texclude = new RegExp(exclude.replace(/,/g, '|'));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new SyntaxError(`Unrecognised argument: \"${arg}\".`);\r\n\t\t}\r\n\t}\r\n\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst coverage = inputFiles.length ? loadCoverage(inputFiles) :\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\treadStdIn().then((data) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tdata = JSON.parse(data);\r\n\t\t\t\t\tconst collector = new Collector();\r\n\t\t\t\t\tcollector.add(data);\r\n\t\t\t\t\treturn collector.getFinalCoverage();\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tconsole.error(err.stack);\r\n\t\t\t\t\tthrow err;\r\n\t\t\t\t}\r\n\t\t\t}, reject);\r\n\r\n\t\tresolve(coverage);\r\n\t}).then((coverage) => {\r\n\t\tlet sources = new MemoryStore();\r\n\t\tconst collector = remap(coverage, {\r\n\t\t\tsources,\r\n\t\t\tbasePath: basePath || undefined,\r\n\t\t\texclude: exclude || undefined,\r\n\t\t});\r\n\t\tif (!Object.keys(sources.map).length) {\r\n\t\t\tsources = undefined;\r\n\t\t}\r\n\t\tconst reportOptions = {};\r\n\t\tif (output) {\r\n\t\t\treturn writeReport(collector, reportType || 'json', reportOptions, output, sources);\r\n\t\t}\r\n\t\tif (reportType && (reportType === 'lcovonly' || reportType === 'text-lcov')) {\r\n\t\t\treturn writeReport(collector, 'text-lcov', reportOptions);\r\n\t\t}\r\n\t\tprocess.stdout.write(JSON.stringify(collector.getFinalCoverage()) + '\\n');\r\n\t\treturn null;\r\n\t});\r\n}\r\n\r\n/* istanbul ignore if: we use the module interface in testing */\r\nif (!module.parent) {\r\n\tprocess.title = 'remap-istanbul';\r\n\t/* first two arguments are meaningless to the process */\r\n\tmain(process.argv.slice(2))\r\n\t\t.then(\r\n\t\t\t(code) => process.exit(code || 0),\r\n\t\t\t(err) => {\r\n\t\t\t\tconsole.log(err.stack);\r\n\t\t\t\tprocess.exit(1);\r\n\t\t\t});\r\n} else {\r\n\tmodule.exports = main;\r\n}\r\n"]}